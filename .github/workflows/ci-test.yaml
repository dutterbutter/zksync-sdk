name: ci-run-tests

on:
  pull_request:
  push:
    branches: [main]

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit-tests:
    name: unit-tests 🧪
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 'latest'

      - name: Install deps
        run: bun install

      - name: Build
        run: bun run build

      - name: Run unit tests
        run: bun run test

  e2e-tests:
    name: e2e-tests 🔚2️⃣🔚
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 'latest'

      - name: Install deps
        run: bun install --frozen-lockfile

      - name: Install build deps
        run: sudo apt-get update && sudo apt-get install -y libssl-dev pkg-config

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Install Foundry (anvil)
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: v1.3.4

      - name: Clone zksync-os-server
        run: git clone https://github.com/matter-labs/zksync-os-server.git

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            zksync-os-server/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('zksync-os-server/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Verify L1 state file exists
        working-directory: zksync-os-server
        run: |
          test -f zkos-l1-state.json || { echo "zkos-l1-state.json missing"; ls -la; exit 1; }
      
      - name: List zksync-os-server contents
        working-directory: zksync-os-server
        run: |
          echo "=== pwd ==="
          pwd
          echo "=== ls -la ==="
          ls -la

      - name: Build server (release)
        working-directory: zksync-os-server
        env:
          CARGO_TERM_COLOR: always
          CARGO_INCREMENTAL: 0
        run: cargo build --release --bin zksync_os_bin

      - name: Start Anvil (L1) and wait
        working-directory: zksync-os-server
        run: |
          nohup anvil --load-state zkos-l1-state.json --port 8545 > anvil.log 2>&1 &
          # Wait up to 60s for Anvil
          for i in {1..60}; do
            if curl -sS -X POST http://127.0.0.1:8545 \
                -H 'content-type: application/json' \
                --data '{"jsonrpc":"2.0","id":1,"method":"eth_blockNumber","params":[]}' \
              | jq -e '.result' >/dev/null; then
              echo "Anvil is up"
              break
            fi
            sleep 1
          done
          if ! curl -sS -X POST http://127.0.0.1:8545 \
              -H 'content-type: application/json' \
              --data '{"jsonrpc":"2.0","id":1,"method":"eth_blockNumber","params":[]}' \
            | jq -e '.result' >/dev/null; then
            echo "Anvil failed to start"
            echo "--- anvil.log (last 200) ---"
            tail -n 200 anvil.log || true
            exit 1
          fi

      - name: Run sequencer and wait for JSON-RPC
        working-directory: zksync-os-server
        env:
          RUST_LOG: info
        run: |
          set -euo pipefail

          # Start sequencer
          if [ -x ./target/release/zksync_os_bin ]; then
            nohup ./target/release/zksync_os_bin > l2.log 2>&1 &
          else
            nohup cargo run --release --bin zksync_os_bin > l2.log 2>&1 &
          fi

          SEQP=$!
          echo "Sequencer PID: $SEQP"

          # Wait up to 10 minutes for a *valid* eth_blockNumber response
          for i in {1..600}; do
            if curl -sS -X POST http://127.0.0.1:3050 \
                  -H 'content-type: application/json' \
                  --data '{"jsonrpc":"2.0","id":1,"method":"eth_blockNumber","params":[]}' \
                | jq -e '.result | startswith("0x")' >/dev/null; then
              echo "L2 JSON-RPC is up"
              break
            fi

            # If the process died, fail fast with logs
            if ! kill -0 "$SEQP" 2>/dev/null; then
              echo "Sequencer process exited early"
              echo "--- l2.log (last 200) ---"
              tail -n 200 l2.log || true
              exit 1
            fi

            # Show progress logs every 30s
            if [ $((i % 30)) -eq 0 ]; then
              echo "--- l2.log (last 80) ---"
              tail -n 80 l2.log || true
            fi
            sleep 1
          done

          # Final readiness check
          if ! curl -sS -X POST http://127.0.0.1:3050 \
                -H 'content-type: application/json' \
                --data '{"jsonrpc":"2.0","id":1,"method":"eth_blockNumber","params":[]}' \
              | jq -e '.result | startswith("0x")' >/dev/null; then
            echo "L2 JSON-RPC failed to start within timeout."
            echo "--- l2.log (last 200) ---"
            tail -n 200 l2.log || true
            exit 1
          fi

      - name: Run ethers e2e tests
        run: bun run test:e2e:ethers

      - name: Run viem e2e tests
        run: bun run test:e2e:viem

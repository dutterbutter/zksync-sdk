name: docs

on:
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

# Required for Pages & commenting on PRs
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build mdBook
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo (mdBook)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-mdbook-${{ hashFiles('docs/**') }}
          restore-keys: |
            ${{ runner.os }}-cargo-mdbook-

      - name: Install mdBook
        run: |
          if ! command -v mdbook >/dev/null 2>&1; then
            cargo install mdbook --version "^0.4" --locked
            cargo install mdbook-admonish
          fi

      - name: Build book
        run: mdbook build docs

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: docs/book

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Deploy
        id: deploy
        uses: actions/deploy-pages@v4

      # Comment the preview URL on PRs
      - name: Comment preview link
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const url = `${{ steps.deploy.outputs.page_url }}`;
            const body = `ðŸ“š **Docs preview** ready: ${url}`;
            const {owner, repo} = context.repo;
            const issue_number = context.payload.pull_request.number;

            // Upsert a single bot comment
            const list = await github.rest.issues.listComments({owner, repo, issue_number});
            const existing = list.data.find(c => c.user?.type === 'Bot' && c.body?.includes('Docs preview'));
            if (existing) {
              await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number, body});
            }
